# Default to python3
- name: install python for ansible
  raw: test -e /usr/bin/python3 || (apt -y update && apt install -y python3-minimal)
  changed_when: False
- setup: # noqa 502

- name: install aptitude package with apt
  apt:
    name: aptitude
    force_apt_get: yes

- name: update all packages to the latest version
  apt:
    upgrade: "yes"
    update_cache: "yes"
    cache_valid_time: '3600'

- name: install required system packages # noqa 403
  apt:
    name:  "{{ item }}"
    state: latest
    update_cache: yes
  loop: [
    'apt-transport-https',
    'ca-certificates',
    'curl',
    'python3-pip',
    'python3-setuptools',
    'software-properties-common',
    'virtualenv'
  ]

- name: install docker-compose
  get_url:
    url: https://github.com/docker/compose/releases/download/1.25.5/docker-compose-Linux-x86_64
    dest: /usr/local/bin/docker-compose
    mode: '0755'

- name: create root directory on host for mounts
  file:
    path: "{{ item.dest }}"
    mode: "{{ item.mode }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    state: directory
  with_items:
    - { dest: "{{ mnt_root }}", mode: '0755', owner: 'root', group: 'root' }

- name: ensure rpcbind service is running
  service:
    name: rpcbind
    state: started
    enabled: yes
  when: aws_efs_enabled|bool

- name: get current availability zone from aws
  uri:
    url: http://169.254.169.254/latest/meta-data/placement/availability-zone
    return_content: yes
  register: _aws_current_az
  when: aws_efs_enabled|bool

- name: mount efs volume
  mount:
    backup: "yes"
    name: "{{ mnt_root }}"
    src: "{{ _aws_current_az.content }}.{{ efs_id }}.efs.{{ aws_region }}.amazonaws.com:/"
    fstype: nfs4
    opts: "nfsvers=4.1"
    state: mounted
  when: aws_efs_enabled|bool

- name: create directories within mount/nfs directory
  file:
    path: "{{ item.dest }}"
    mode: "{{ item.mode }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    state: directory
  with_items:
    - { dest: "{{ mnt_root }}/{{ org_name }}", mode: '0755', owner: 'root', group: 'root' }
    - { dest: "{{ mnt_root }}/{{ org_name }}/exchange", mode: '0777', owner: 'root', group: 'root' }
    - { dest: "{{ mnt_root }}/{{ org_name }}/home/grader-{{ course_id }}", mode: '0755', owner: '10001', group: '100' }
    - { dest: "{{ mnt_root }}/{{ org_name }}/home/grader-{{ course_id }}/.jupyter", mode: '0755', owner: '10001', group: '100' }
    - { dest: "{{ mnt_root }}/{{ org_name }}/home/grader-{{ course_id }}/{{ course_id }}", mode: '0755', owner: '10001', group: '100' }

- name: add docker gpg apt key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: add docker repository
  apt_repository:
    repo: deb https://download.docker.com/linux/ubuntu bionic stable
    state: present

- name: update apt and install docker-ce # noqa 403
  apt:
    update_cache: yes
    name: docker-ce
    state: latest

- name: install docker python client
  pip:
    name: docker

- name: create a docker network
  docker_network:
    name: 'jupyter-network'

- name: create a working directory
  file:
    path: "{{ working_dir }}"
    state: directory
