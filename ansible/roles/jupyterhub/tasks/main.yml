---
- name: create external postgres data volume
  docker_volume:
    name: db-data

- name: create external postgres data volume for notebooks labs
  docker_volume:
    name: db-labs-data

- name: create external jupyterhub and setup-course data volume
  docker_volume:
    name: jupyterhub-data

- name: generate random key for jupyterhub crypt key # noqa 301 305
  shell: /usr/bin/openssl rand -hex 32
  register: _jhub_crypt_key_result

- name: assign jupyterhub cryptographic key from stdout
  set_fact:
    jhub_crypt_key={{ _jhub_crypt_key_result.stdout }}

- name: generate random key for jupyterhub api token # noqa 301 305
  shell: /usr/bin/openssl rand -hex 32
  register: _jhub_api_token_result

- name: assign jhub api token from stdout
  set_fact: jhub_api_token={{ _jhub_api_token_result.stdout  }}

- name: generate random key for proxy # noqa 301 305
  shell: /usr/bin/openssl rand -hex 32
  register: _config_auth_proxy_token_result

- name: assign config auth proxy token from stdout
  set_fact:
    config_auth_proxy_token={{ _config_auth_proxy_token_result.stdout }}

- name: generate random lti11 client id (consumer key) # noqa 301 305
  shell: /usr/bin/openssl rand -hex 16
  register: _lti11_consumer_key_result

- name: assign lti11 client id (consumer key) from stdout
  set_fact:
    lti11_consumer_key_result={{ _lti11_consumer_key_result.stdout }}

- name: generate random lti11 shared secret # noqa 301 305
  shell: /usr/bin/openssl rand -hex 16
  register: _lti11_shared_secret_result

- name: assign lti11 shared secret from stdout
  set_fact:
    lti11_shared_secret_result={{ _lti11_shared_secret_result.stdout }}

- name: copy requirements.txt for base jupyterhub image
  copy:
    src: requirements.txt
    dest: "{{ working_dir }}/jupyterhub-requirements.txt"

- name: is lti11 enabled
  debug:
    msg: "is lti11 enabled?: {{ lti11_enabled }}"

- name: is lti13 enabled
  debug:
    msg: "is lti13 enabled?: {{ lti13_enabled }}"

- name: copy the jupyterhub configuration file with firstuse authenticator config
  copy:
    src: jupyterhub_config_fu.py
    dest: "{{ working_dir }}/jupyterhub_config.py"
  when: not lti11_enabled|bool and not lti13_enabled|bool

- name: copy the jupyterhub configuration file with lti v1.1 config
  copy:
    src: jupyterhub_config_lti11.py
    dest: "{{ working_dir }}/jupyterhub_config.py"
  when: lti11_enabled|bool

- name: copy the jupyterhub configuration file with lti v1.3 config
  copy:
    src: jupyterhub_config_lti13.py
    dest: "{{ working_dir }}/jupyterhub_config.py"
  when: lti13_enabled|bool

- name: copy postgres utility scripts
  copy:
    src: wait-for-postgres.sh
    dest: "{{ working_dir }}/wait-for-postgres.sh"

- name: copy favicon
  copy:
    src: share/static/images/favicon.ico
    dest: "{{ working_dir }}/favicon.ico"

- name: copy logo
  copy:
    src: share/static/images/illumidesk-80.png
    dest: "{{ working_dir }}/illumidesk-80.png"

- name: copy jupyterhub template files
  copy:
    src: share/templates
    dest: "{{ working_dir }}/share"

- name: ensures {{working_dir}}/keys directory exists
  file:
    path: "{{working_dir}}/keys"
    state: directory

- name: create lti v1.3 private key in pem format
  openssl_privatekey:
    path: "{{working_dir}}/keys/rsa_private.pem"
    mode: '0644'

- name: create base jupyterhub dockerfile from template
  template:
    src: Dockerfile.jhub.j2
    dest: "{{ working_dir }}/Dockerfile.jhub"

- name: create grader service env var file from template
  template:
    src: env.service.j2
    dest: "{{ working_dir }}/env.service"
  when: not lti11_enabled|bool

- name: create the jupyterhub env var file from template
  template:
    src: env.jhub.j2
    dest: "{{ working_dir }}/env.jhub"

- name: create base jupyterhub dockerfile from template
  template:
    src: Dockerfile.jhub.j2
    dest: "{{ working_dir }}/Dockerfile.jhub"

- name: build jupyterhub image
  docker_image:
    name: "{{ docker_illumidesk_jhub_image }}"
    build:
      path: "{{ working_dir }}"
      dockerfile: "{{ docker_jupyterhub_dockerfile }}"
      pull: no
    state: present
    source: build
    force_source: yes

- name: create the docker-compose yaml file from template
  template:
    src: docker-compose.yml.j2
    dest: "{{ working_dir }}/docker-compose.yml"
